#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>#include <errno.h>
#include <sys/types.h>
#include <unistd.h>
#define BUF_SIZE 1000
void doWrite(int fd, const char *buff, ssize_t len){
ssize_t wcnt,idx=0;
do {
wcnt = write(fd,buff + idx, len - idx);
if (wcnt == -1){ /* error */
perror("write");
exit(1);
}
idx += wcnt;
} while (idx < len);
}
//Write a file(=infile) to file with file descriptor==output_fd
void write_file(int output_fd, const char *infile)
{
int input_fd;
ssize_t ret_in;//Numbers of bytes return by read and write
char buffer[BUF_SIZE]; //Character buffer
/* Create input file descriptor */
input_fd = open (infile, O_RDONLY);
if (input_fd == -1) {
perror ("open");
exit(1);
}
/*Copy process from input */
for(;;){
ret_in =read(input_fd,buffer,BUF_SIZE);
if(ret_in == -1){//error
perror("read");
exit(1);
}else if(ret_in==0){//end of file
break;
}
doWrite(output_fd,buffer,ret_in);
}
//Close input file descriptor
if(close(input_fd) == -1){
perror("close");exit(1);
}
}
int main(int argc, char* argv[])
{
int output_fd;
// Input and output file descriptors
//Check to see if any of the arguments are missing or if we have too many
if(argc < 3 || argc > 4){
printf ("Usage: %s infile1 infile2 [outfile (default:fconc.out)]\n",argv[0]);
return 1;//return fail
}
// Create output file descriptor
if(argc==3){//default output file
output_fd = open("fconc.out", O_WRONLY | O_CREAT | O_TRUNC, 0644);
if(output_fd == -1){
perror("open");
return 1;//return fail
}
}else{//user defined output file
output_fd = open(argv[3], O_WRONLY | O_CREAT | O_TRUNC, 0644);
if(output_fd == -1){
perror("open");
return 1;//return fail
}
}
//write the two input files
write_file(output_fd,argv[1]);
write_file(output_fd,argv[2]);
//Close output file descriptor
if(close(output_fd) == -1){
perror("close");
exit(1);
}
return 0;
}
