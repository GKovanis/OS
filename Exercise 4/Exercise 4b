#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <assert.h>

#include <sys/wait.h>
#include <sys/types.h>

#include "proc-common.h"
#include "request.h"

/* Compile-time parameters. */
#define SCHED_TQ_SEC 2                /* time quantum */
#define TASK_NAME_SZ 60               /* maximum size for a task's name */
#define SHELL_EXECUTABLE_NAME "shell" /* executable for shell */

struct procedure{ //we created it

    int id;
    int pid;
    char name[TASK_NAME_SZ];
    struct procedure *next;
};

struct procedure *head,*tail;
int max_id;
int killed_from_shell=0;
int wait_pid;//the pid of the procedure that we wait for sigstop

void *safe_malloc(size_t size) 
{
    void *p;

    if ((p = malloc(size)) == NULL) {
        fprintf(stderr, "Out of memory, failed to allocate %zd bytes\n",
                size);
        exit(1);
    }

    return p;
}

void child(char *name) //given
{
    raise(SIGSTOP);//stop for the first time

    char *newargv[] = { name, NULL, NULL, NULL };
    char *newenviron[] = { NULL };

    printf("About to replace myself with the executable %s...\n",
            name);

    execve(name, newargv, newenviron);

    /* execve() only returns on error */
    perror("execve");
    exit(1);
}

/* Print a list of all tasks currently being scheduled.  */
static void
sched_print_tasks(void) //we created it
{
    struct procedure *temp=head;
    
    printf("Current Proc:");
    for( ; temp!=NULL;temp=temp->next){
        printf("Name=%s | Id=%d | Pid=%d\n",temp->name,temp->id,temp->pid);   
    }

}

/* Send SIGKILL to a task determined by the value of its
 * scheduler-specific id.
 */
static int
sched_kill_task_by_id(int id) //we created it
{
	struct procedure *temp=head,*prev=NULL;
    
    for( ;temp!=NULL;prev=temp,temp=temp->next){
        if(temp->id==id){
            if(prev==NULL){//logically won't happen because it would ask to stop itself
                printf("Tried to kill myself.Impossible\n");
            }else{
               //remove it from the list
               printf("Killed procedure with name=%s,id=%d,pid=%d\n",temp->name,temp->id,temp->pid);
               prev->next=temp->next;
               if(temp==tail)
                   tail=prev;
                killed_from_shell=1;
                kill(temp->pid,SIGKILL);
                free(temp);
            }
            return 1;//return success
        }
    }
	return -1;//return failure
}


/* Create a new task.  */
static void
sched_create_task(char *executable) //we created it
{
    struct procedure *temp;
    pid_t p;

    /*Create the new procedure*/
    printf("Parent: Creating child from shell comand...\n");
    p = fork();
    if (p < 0) {
        /* fork failed */
        perror("fork");
        exit(1);
    }
    if (p == 0) {
        /* In child process */
        raise(SIGSTOP);
        char *newargv[] = { executable, NULL, NULL, NULL };
        char *newenviron[] = { NULL };

        printf("I am %s, PID = %ld\n",
                executable, (long)getpid());
        printf("About to replace myself with the executable %s...\n",
                executable);

        execve(executable, newargv, newenviron);

        /* execve() only returns on error */
        perror("execve");
        exit(1);

    }

    /*Add the new procedure to the end of the list of the scheduler*/
    temp=safe_malloc(1*sizeof(struct procedure));
    temp->id=max_id;
    max_id++;
    temp->pid=p;
    temp->next=NULL;
    strcpy(temp->name,executable);

    tail->next=temp;
    tail=temp;
    
}

/* Process requests by the shell.*/
static int
process_request(struct request_struct *rq) //given
{
	switch (rq->request_no) {
		case REQ_PRINT_TASKS:
			sched_print_tasks();
			return 0;

		case REQ_KILL_TASK:
			return sched_kill_task_by_id(rq->task_arg);

		case REQ_EXEC_TASK:
			sched_create_task(rq->exec_task_arg);
			return 0;

		default:
			return -ENOSYS;
	}
}

/* 
 * SIGALRM handler
 */
static void
sigalrm_handler(int signum) //we created it
{
    if (signum != SIGALRM) {
        fprintf(stderr, "Internal error: Called for signum %d, not SIGALRM\n",
                signum);
        exit(1);
    }

    printf("About to stop procedure %s:id=%d:pid=%d\n",head->name,head->id,head->pid);
    kill(head->pid,SIGSTOP);
}


/* 
 * SIGCHLD handler
 */
static void
sigchld_handler(int signum) //we created it
{
    pid_t p;
    int status;

    if (signum != SIGCHLD) {
        fprintf(stderr, "Internal error: Called for signum %d, not SIGCHLD\n",
                signum);
        exit(1);
    }

    /*
     * Something has happened to one of the children.
     * We use waitpid() with the WUNTRACED flag, instead of wait(), because
     * SIGCHLD may have been received for a stopped, not dead child.
     *
     * A single SIGCHLD may be received if many processes die at the same time.
     * We use waitpid() with the WNOHANG flag in a loop, to make sure all
     * children are taken care of before leaving the handler.
     */
    for (;;) {
        p = waitpid(-1, &status, WUNTRACED | WNOHANG);
        if (p < 0) {
            perror("waitpid");
            exit(1);
        }
        if (p == 0)
            break;

        explain_wait_status(p, status);

        if (WIFEXITED(status) || WIFSIGNALED(status)) {
            /* A child has died */
            if(!killed_from_shell){
                if(head->id==tail->id){//if the procedure was the last running the exit
                    printf("Nothing more to do.Exiting...\n");
                    exit(0);
                }
                /*remove the procedure from the list*/
                struct procedure *temp;
                temp=head;
                head=head->next;
                /*Free the memory*/
                free(temp);
                /*Set the timer*/
                if (alarm(SCHED_TQ_SEC) < 0) {
                    perror("alarm");
                    exit(1);
                }
                /*And wake up the next procedure*/
                wait_pid=head->pid;
                kill(head->pid,SIGCONT);
                printf("Child is dead.Replacing it with [%s,%d,%d]\n",head->name,head->id,head->pid);
            }else{//if the kill was a result from a shell command
                killed_from_shell=0;//do nothing
            }
        }
        if (WIFSTOPPED(status)) {
            /* A child has stopped due to SIGSTOP/SIGTSTP, etc... */
            if(wait_pid!=p){//if the Sigstop was not for the procedure we were waiting just ignore it
                return ;
           }

            if(head->next!=NULL)
                printf("Replace [%s,%d,%d] with [%s,%d,%d]\n",head->name,head->id,head->pid,head->next->name,head->next->id,head->next->pid);
            else 
                printf("Replacing with myself\n");
            /*Add the procedure to the end of the list*/
            tail->next=head;
            head=head->next;
            tail=tail->next;
            tail->next=NULL;
            /* Arrange for an alarm after tq sec */
            if (alarm(SCHED_TQ_SEC) < 0) {
                perror("alarm");
                exit(1);
            }
            wait_pid=head->pid;//mark the pid of the procedure that i wait SIGSTOP for
            kill(head->pid,SIGCONT);
        }
    }

}

/* Disable delivery of SIGALRM and SIGCHLD. */
static void
signals_disable(void) //δίνεται
{
	sigset_t sigset;

	sigemptyset(&sigset);
	sigaddset(&sigset, SIGALRM);
	sigaddset(&sigset, SIGCHLD);
	if (sigprocmask(SIG_BLOCK, &sigset, NULL) < 0) {
		perror("signals_disable: sigprocmask");
		exit(1);
	}
}

/* Enable delivery of SIGALRM and SIGCHLD.  */
static void
signals_enable(void) //given
{
	sigset_t sigset;

	sigemptyset(&sigset);
	sigaddset(&sigset, SIGALRM);
	sigaddset(&sigset, SIGCHLD);
	if (sigprocmask(SIG_UNBLOCK, &sigset, NULL) < 0) {
		perror("signals_enable: sigprocmask");
		exit(1);
	}
}


/* Install two signal handlers.
 * One for SIGCHLD, one for SIGALRM.
 * Make sure both signals are masked when one of them is running.
 */
static void
install_signal_handlers(void) //given
{
	sigset_t sigset;
	struct sigaction sa;

	sa.sa_handler = sigchld_handler;
	sa.sa_flags = SA_RESTART;
	sigemptyset(&sigset);
	sigaddset(&sigset, SIGCHLD);
	sigaddset(&sigset, SIGALRM);
	sa.sa_mask = sigset;
	if (sigaction(SIGCHLD, &sa, NULL) < 0) {
		perror("sigaction: sigchld");
		exit(1);
	}

	sa.sa_handler = sigalrm_handler;
	if (sigaction(SIGALRM, &sa, NULL) < 0) {
		perror("sigaction: sigalrm");
		exit(1);
	}

	/*
	 * Ignore SIGPIPE, so that write()s to pipes
	 * with no reader do not result in us being killed,
	 * and write() returns EPIPE instead.
	 */
	if (signal(SIGPIPE, SIG_IGN) < 0) {
		perror("signal: sigpipe");
		exit(1);
	}
}

static void
do_shell(char *executable, int wfd, int rfd) //given
{
	char arg1[10], arg2[10];
	char *newargv[] = { executable, NULL, NULL, NULL };
	char *newenviron[] = { NULL };

	sprintf(arg1, "%05d", wfd);
	sprintf(arg2, "%05d", rfd);
	newargv[1] = arg1;
	newargv[2] = arg2;

	raise(SIGSTOP);
	execve(executable, newargv, newenviron);

	/* execve() only returns on error */
	perror("scheduler: child: execve");
	exit(1);
}

/* Create a new shell task.
 *
 * The shell gets special treatment:
 * two pipes are created for communication and passed
 * as command-line arguments to the executable.
 */
static pid_t
sched_create_shell(char *executable, int *request_fd, int *return_fd) //given
{
	pid_t p;
	int pfds_rq[2], pfds_ret[2];

	if (pipe(pfds_rq) < 0 || pipe(pfds_ret) < 0) {
		perror("pipe");
		exit(1);
	}

	p = fork();
	if (p < 0) {
		perror("scheduler: fork");
		exit(1);
	}

	if (p == 0) {
		/* Child */
		close(pfds_rq[0]);
		close(pfds_ret[1]);
		do_shell(executable, pfds_rq[1], pfds_ret[0]);
		assert(0);
	}
	/* Parent */
	close(pfds_rq[1]);
	close(pfds_ret[0]);
	*request_fd = pfds_rq[0];
	*return_fd = pfds_ret[1];

    return p;
}

static void
shell_request_loop(int request_fd, int return_fd) //given
{
	int ret;
	struct request_struct rq;

	/*
	 * Keep receiving requests from the shell.
	 */
	for (;;) {
		if (read(request_fd, &rq, sizeof(rq)) != sizeof(rq)) {
			perror("scheduler: read from shell");
			fprintf(stderr, "Scheduler: giving up on shell request processing.\n");
			break;
		}
    
		signals_disable();
		ret = process_request(&rq);
		signals_enable();

		if (write(return_fd, &ret, sizeof(ret)) != sizeof(ret)) {
			perror("scheduler: write to shell");
			fprintf(stderr, "Scheduler: giving up on shell request processing.\n");
			break;
		}
	}
}


int main(int argc, char *argv[])
{
    int nproc,i;
    pid_t p,shell_pid;
    struct procedure *temp;
   
    nproc = argc-1; /* number of proccesses goes here */
    if (nproc == 0) {
        fprintf(stderr, "Scheduler: No tasks. Exiting...\n");
        exit(1);
    }
        
    /* Two file descriptors for communication with the shell */
	static int request_fd, return_fd;

	/* Create the shell. */
	shell_pid=sched_create_shell(SHELL_EXECUTABLE_NAME, &request_fd, &return_fd);

	/*
	 * For each of argv[1] to argv[argc - 1],
	 * create a new child process, add it to the process list.
     */

    for(i=0;i<nproc;i++){
        printf("Parent: Creating child...\n");
        p = fork();
        if (p < 0) {
            /* fork failed */
            perror("fork");
            exit(1);
        }
        if (p == 0) {
            /* In child process */
            child(argv[i+1]);
            /*
             * Should never reach this point,
             * child() does not return
             */
            assert(0);
        }
        temp=safe_malloc(1*sizeof(struct procedure));
        temp->id=i;
        temp->pid=p;
        if(strlen(argv[i+1])>TASK_NAME_SZ-1){
            printf("Name of the task too long.Exiting...\n");
            exit(0);
        }
        strcpy(temp->name,argv[i+1]);
        temp->next=NULL;
        if(i==0){
            head=temp;
            tail=temp;
        }else{
            tail->next=temp;
            tail=temp;
        }
    }
    
    /*  add the shell to the end of the process list */
    temp=safe_malloc(1*sizeof(struct procedure));
    temp->id=i;
    max_id=i+1;
    temp->pid=shell_pid;
    temp->next=NULL;
    strcpy(temp->name,SHELL_EXECUTABLE_NAME);

    tail->next=temp;
    tail=temp;

    for(temp=head,i=0;temp!=NULL;temp=temp->next,i++){
        printf("%s %d %d\n",temp->name,temp->id,temp->pid);
    }

	/* Wait for all children(nproc+shell) to raise SIGSTOP before exec()ing. */
	wait_for_ready_children(nproc+1);

	/* Install SIGALRM and SIGCHLD handlers. */
	install_signal_handlers();

    //start the clock and the first procedure
    /* Arrange for an alarm after tq sec */
    if (alarm(SCHED_TQ_SEC) < 0) {
        perror("alarm");
        exit(1);
    }
    wait_pid=head->pid;//mark the pid of the procedure that i wait SIGSTOP for
    kill(head->pid,SIGCONT);

	shell_request_loop(request_fd, return_fd);

	/* Now that the shell is gone, just loop forever
	 * until we exit from inside a signal handler.
	 */
	while (pause())
		;

	/* Unreachable */
	fprintf(stderr, "Internal error: Reached unreachable point\n");
	return 1;
}
