#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <sys/types.h>
#include <sys/wait.h>

#include "proc-common.h"
#include "tree.h"

#define SLEEP_PROC_SEC  10
#define SLEEP_TREE_SEC  3

int exit_stat=0;
void fork_procs(struct tree_node *node)
{
    //If not children, then sleep
    //If children, I create and wait() for each one

    change_pname(node->name);//Change process name
    printf("%s was created!!\n",node->name);

    if(node->nr_children==0){//If leaf, then sleep
        printf("%s: About to stop...\n",node->name);
        raise(SIGSTOP);

        /*------AFTER SIGCONT-----*/
        printf("%s: Going to sleep.\n",node->name);
        sleep(SLEEP_PROC_SEC);//It sleeps because it is a lea
        printf("%s: Exiting...\n",node->name);
        exit(exit_stat);
    }

    pid_t p[node->nr_children-1],pid;
    int i,status;
    for(i=0;i<node->nr_children;i++){
        p[i]=fork();
        if(p[i]<0){
            perror("fork");
            exit(1);
        }else if(p[i]==0){
            fork_procs((node->children)+i);
            //recursion
        }
    }

    wait_for_ready_children(node->nr_children);
//make sure all the children have stopped


    //Created all the children for this node so now I stop
    printf("%s: About to stop...\n",node->name);

    raise(SIGSTOP);

    /*------AFTER SIGCONT-----*/
    printf("%s: About to continue...\n",node->name);

    for(i=0;i<node->nr_children;i++){//for every child,wake him up and wait for it
        kill(p[i], SIGCONT);
        pid = wait(&status);
        if(pid==p[i]){
           explain_wait_status(pid, status);
        }else{
            printf("Unexpected child died\n");
            exit(1);
        }

    }

    printf("%s: Exiting...\n",node->name);
    exit(exit_stat);
}

int main(int argc,char **argv)
{
    pid_t pid;
    int status;

    struct tree_node *root;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <input_tree_file>\n\n", argv[0]);
        exit(1);
    }

    root = get_tree_from_file(argv[1]);
 //   print_tree(root);


    /* Fork root of process tree */
    pid = fork();
    if (pid < 0) {
        perror("main: fork");
        exit(1);
    }
    if (pid == 0) {
        /* Child */
        fork_procs(root);
        exit(1);
    }

    /*Father*/
    wait_for_ready_children(1); //1-> For how many children it wil wait

    /* Print the process tree root at pid */
    show_pstree(pid);

    /* for ask2-signals */
     kill(pid, SIGCONT);

    /* Wait for the root of the process tree to terminate */
    pid = wait(&status);
    explain_wait_status(pid, status);

    return 0;
}
