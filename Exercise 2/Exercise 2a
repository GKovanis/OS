#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <sys/types.h>
#include <sys/wait.h>

#include "proc-common.h"

#define SLEEP_PROC_SEC  10
#define SLEEP_TREE_SEC  3

void fork_procs(void)
{
   //initial process is A.
    pid_t p1,p2;
    int status1,status2;

    change_pname("A");

    p1=fork();//Create first child of A
    if(p1<0){
        perror("fork");
        exit(1);
    }else if(p1==0){
        change_pname("C");// C
        printf("C: Going to sleep.\n");
        sleep(SLEEP_PROC_SEC);//It sleeps because it is a leaf
        printf("C: Exiting...\n");
        exit(17);
    }

    //still in A
    p2=fork();//Create second child of A
    if(p2<0){
        perror("fork");
        exit(1);
    }else if(p2==0){
        change_pname("B");//η B
        pid_t p;
        int status;

        p=fork();
        if(p<0){
            perror("fork");
            exit(1);
        }else if(p==0){
            change_pname("D");//η D
            printf("D: Going to sleep.\n");
            sleep(SLEEP_PROC_SEC);//It sleeps because it is a leaf     
       	    printf("D: Exiting...\n");
            exit(13);
        }
        printf("B: Waiting.\n");
        p = wait(&status);
        explain_wait_status(p, status);
        printf("B: Exiting...\n");
        exit(19);
    }

    //A created all children, so now it waits

    printf("A: Waiting...\n");

    p1=wait(&status1);
    p2=wait(&status2);

    explain_wait_status(p1, status1);
    explain_wait_status(p2, status2);

    printf("A: Exiting...\n");
    exit(16);
}

int main(void)
{
    pid_t pid;
    int status;

    /* Fork root of process tree */
    pid = fork();
    if (pid < 0) {
        perror("main: fork");
        exit(1);
    }
    if (pid == 0) {
        /* Child */
        fork_procs();
        exit(1);
    }

    /*Father*/

    sleep(SLEEP_TREE_SEC);

    /* Print the process tree root at pid */

    show_pstree(pid);

    /* Wait for the root of the process tree to terminate */
    pid = wait(&status);
    explain_wait_status(pid, status);

    return 0;
}
